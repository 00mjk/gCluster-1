#
# This script make a validation using Fowlkes and Mallow Index
# to verify the clustering algorithm
#
# It compares clusters selecting pair of points
#
# We need a Ground Truth where each point has its classification (A real partition)
#
# In the partition generated by algorithm is the second partition
import os
import sys
import itertools


def showHeader():
    print("gClustering algorithm - Script to validate results")
    print("Developed by Ricardo Brandao: https://github.com/programonauta/grid-clustering")
    print("------------------------------------------------------------------------------")


def showError(msgErr):
    print("Error on script")
    print("---------------")
    print(msgErr)
    exit(1)


def showHelp():
    print("\tOptions\t\tDescription")
    print("\t-h\t\tShow this help")
    print("\t-i <file>\tInput file")
    print("\t-p <pos1,pos2>\tList of colmuns of Algorithm 1 and Ground truth on csv file (Ex.: -p 5,6)/")
    return

def parseOpt(opt, hasArgument):
    # verify if option is on the arg list
    mat = [i for i, x in enumerate(sys.argv) if x == opt]
    q = len(mat)

    if q == 0:
        return False, ""
    elif q > 1:
        showError("there is more than one " + opt + " option")
    else:
        ind = mat[0]
        arg = ""
        if hasArgument:
            if len(sys.argv) == ind + 1:
                arg = ""
            else:
                arg = sys.argv[ind + 1]
        return True, arg


# Print the header of script
showHeader()

# verify if have any -h option
hasHelp, opt = parseOpt("-h", False)

if (hasHelp > 0):
    showHelp()
    exit(1)

hasPosition, matPosition = parseOpt("-p", True)
if matPosition == "":
    posAlgo = -2
    posGT = -1
else:
    matPosition = matPosition.split(",")
    posAlgo = int(matPosition[0])
    posGT = int(matPosition[1])

if (posAlgo == posGT):
    print("Error on columns of Labels: the parameter informed was decoded by ", posAlgo, " and ", posGT)
    exit(1)

print("Columns of Labels: (Algorithm, GT): (",posAlgo,",",posGT,")" )

hasFile, inputFile = parseOpt("-i", True)

if (inputFile == ""):
    showError("Input file not informed")
    exit(1)

# replace "\\" by "/". In windows machines uses "\" for subdirectories. Python could handle with / in all OSs.
inputFile = inputFile.replace("\\", "/")

# Create matMap list where there is the correspondence btw cluster number found and the ground truth
print("Reading file", inputFile)

fInd = open(inputFile, "r")
#
# matClusters is a list of points
#    and each point has a list that defines the cluster label it belongs on Ground Truth partition (position 0) and
#    gCluster partition (position 1)
#
matClusters = []
first = True
minCells = 0
for line in fInd:
    CSVLine = line.split(",")
    if first:
        first = False
        continue

    aux = [int(CSVLine[posAlgo]), int(CSVLine[posGT])]
    matClusters.append(aux)

#
# Process to calculate index
#
# First create a combination of all points in matClusters
#
# for each pair of points, compare the cluster label of point in Ground Truth (position 0) and
#          cluster label of point
#
# Calculate the classification of each pair of points
#
print()
print("ss = same/same = the two points belong in the same cluster on both GT and gCluster")
print("sd = same/different = the points belong in the same cluster on gCluster and diff on GT")
print("ds = different/same = Belong in diff clusters on gCluster and in the same on GT")
print("dd = different/different = the points belong in different clusters on both partitions")

print()

ss = 0
sd = 0
ds = 0
dd = 0

# Now iterate a combination of matClusters

for pairs in itertools.combinations(matClusters, 2):
    # compare clusters on GT
    clGT = (pairs[0][1] == pairs[1][1])  # test clusters on GT
    clgC = (pairs[0][0] == pairs[1][0])  # test clusters no gCluster

    if (clgC and clGT):  # same cluster on gCluster and GT
        ss += 1
    elif (clgC and not clGT):  # same on gCluster and diff on GT
        sd += 1
    elif (not clgC and clGT):  # diff on gCluster and same on GT
        ds += 1
    else:  # diff clusters on both partitions
        dd += 1

m1 = ss + sd
m2 = ss + ds
m = ss + sd + ds + dd

# calculate FM index: ss over the square root of m1 x m2
fm = ss / ( (m1 * m2) ** 0.5 )
rand = (ss + sd) / m
jac = (ss) /  (ss + sd + ds)


print("ss:", ss)
print("sd:", sd)
print("ds:", ds)
print("dd:", dd)
print("-------------")
print("FM:", fm)
print("Rand:", rand)
print("Jaccard:", jac)